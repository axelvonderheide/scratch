#-------------------------------------------------------------------------------
#
# Copyright (c) 2009, IMB, RWTH Aachen.
# All rights reserved.
#
# This software is provided without warranty under the terms of the BSD
# license included in simvisage/LICENSE.txt and may be redistributed only
# under the conditions described in the aforementioned license.  The license
# is also available online at http://www.simvisage.com/licenses/BSD.txt
#
# Thanks for using Simvisage open source!
#
# Created on Aug 3, 2009 by: rch

from enthought.traits.api import \
    HasTraits, Directory, List, Int, Float, Any, \
    on_trait_change, File, Constant, Instance, Trait, \
    Array, Str, Property, cached_property, WeakRef, \
    Dict, Button, Bool

from enthought.util.home_directory import \
    get_home_directory

from enthought.traits.ui.api import \
    View, Item, DirectoryEditor, TabularEditor, HSplit, VGroup, \
    TableEditor
    
from enthought.traits.ui.table_column import \
    ObjectColumn
    
from enthought.traits.ui.menu import \
    OKButton, CancelButton
    
from enthought.traits.ui.tabular_adapter \
    import TabularAdapter
    
import os

import csv

from numpy import array, fabs, where, copy

from scipy.io import read_array
from numpy import loadtxt, argmax, polyfit, poly1d, frompyfunc

from enthought.traits.ui.table_filter \
    import EvalFilterTemplate, MenuFilterTemplate, RuleFilterTemplate, \
           EvalTableFilter

#-- Tabular Adapter Definition -------------------------------------------------

from string import replace
from os.path import exists

def fcomma2fdot(x): return float( replace(x, ',', '.') )

class ExDesignSpec(HasTraits):
    ''' Specification of the experiment design.
    
    Defines the parameters varied in the experiment design.
    The parameters can be read from the file included in the design.
    '''

    factors = []
    data_converters = { 0 : fcomma2fdot,
                        1 : fcomma2fdot }
                
    design_file    = Str('exdesign_num.csv')
    data_dir       = Str('data')
    data_file_name = " '%s %dnm %d.TRA' % (self.embedding, self.torque, self.rep_number ) "

    
#class ExRun( HasTraits ):
#    '''
#    Represent a single test specifying the design parameters.
#    and access to the measured data.
#    '''
#    data_dir = Str
#    exdesign_reader = WeakRef
#    
#    def __init__(self, exdesign_reader, row, **kw ):
#        '''Retrieve the traits from the exdesign reader
#        '''
#        self.exdesign_reader = exdesign_reader
#        factors = self.exdesign_reader.exdesign_spec.factors
#        for idx, ps in enumerate( factors ):
#            cmd =  '%s( %s("%s") )' % (ps[0], ps[1], row[idx] )
#            self.add_trait( ps[2], eval( cmd ) )
#        super( ExRun, self ).__init__(**kw)
#         
#    data_file = File
#    def _data_file_default(self):
#        return os.path.join( self.data_dir, self._get_file_name() )
#
#    @on_trait_change('data_file')
#    def _reset_data_file(self):
#        self.data_file = os.path.join( self.data_dir, self._get_file_name() )
#
#    def _get_file_name(self):
#        return str( self.std_num ) + '.txt'
#    
#    def _get_file_name(self):
#        fname = eval( self.exdesign_reader.exdesign_spec.data_file_name )
#        print 'fname',fname
#        return fname
#
#    _arr = Property( Array( float ), depends_on = 'data_file' )
#    def _get__arr(self):
#        return loadtxt( self.data_file, skiprows=2, 
#                        delimiter = self.exdesign_reader.exdesign_spec.data_delimiter,
#                        converters = self.exdesign_reader.exdesign_spec.data_converters  )
#
#    xdata = Property( Array(float), depends_on = 'data_file' )
#    @cached_property
#    def _get_xdata(self):
#        return self._arr[:,0]
#
#    ydata = Property( Array(float), depends_on = 'data_file' )
#    @cached_property
#    def _get_ydata(self):
#        return self._arr[:,1]
#    
#    max_stress_idx = Property( Int )
#    def _get_max_stress_idx(self):
#        return argmax( self._get_ydata() )
#
#    max_stress = Property( Float )
#    def _get_max_stress(self):
#        return self.ydata[ self.max_stress_idx ]
#
#    strain_at_max_stress = Property( Float )
#    def _get_strain_at_max_stress(self):
#        return self.xdata[ self.max_stress_idx ]
#
#    # get the ascending branch of the response curve
#    xdata_asc = Property( Array(float ) )
#    def _get_xdata_asc(self):
#        return self.xdata[:self.max_stress_idx + 1]
#    
#    ydata_asc = Property( Array(float ) )
#    def _get_ydata_asc(self):
#        return self.ydata[:self.max_stress_idx + 1]
# 
#    # interpolate the polynomial
#    polyfit = Property( Array(float) )
#    def _get_polyfit(self):
#        #
#        # define x array to evaluate the derivatives properly
#        #
#        #xdarr = arange(0, self.xdata_asc[-1], 0.01)
#        #
#        # get the fit with 10-th-order polynomial
#        #
#        p = polyfit( self.xdata_asc, self.ydata_asc, 5)
#        #
#        # define the polynomial function
#        #
#        pf = poly1d(p)
#        #
#        # define universal function for the value
#        # (used just for visualization)
#        #
#        pfun = frompyfunc( pf, 1, 1)        
#        
#        approx_dat = array( pfun( self.xdata_asc ), dtype = float )
#        return approx_dat
#    
#    traits_view = View( Item( 'data_dir',style = 'readonly' ),
#                        Item( 'max_stress_idx',style = 'readonly' ),
#                        Item( 'max_stress',style = 'readonly' ),
#                        Item( 'strain_at_max_stress',style = 'readonly' ),
#                        )

#-----------------------------------------------------------------------------------
# ExDesignReader
#-----------------------------------------------------------------------------------
from enthought.enable.component_editor import \
    ComponentEditor
from enthought.chaco.api import \
    Plot, AbstractPlotData, ArrayPlotData, \
    ArrayDataSource
from enthought.chaco.tools.api import \
    PanTool, ZoomTool

from enthought.traits.ui.file_dialog  \
    import open_file, FileInfo, TextInfo, ImageInfo

from enthought.traits.ui.api \
    import View, Item, TabularEditor
    
from enthought.traits.ui.tabular_adapter \
    import TabularAdapter
    
class ArrayAdapter ( TabularAdapter ):

    columns = Property
    def _get_columns(self):
        array_attr = getattr( self.object, self.name )
        if len( array_attr.shape ) == 1 :
            return []
        else:
            print 'resetting columns'
            n_columns = getattr( self.object, self.name ).shape[1]
            cols = [ (str(i), i ) for i in range( n_columns ) ]
            return [ ('i', 'index') ] + cols
        
    font        = 'Courier 10'
    alignment   = 'right'
    format      = '%6.2f'
    index_text  = Property
    
    def _get_index_text ( self ):
        return str( self.row )

array_editor = TabularEditor( adapter = ArrayAdapter() )

    
class EXDesignReader(HasTraits):
    '''Read the data from the directory
    
    The design is described in semicolon-separated
    csv file providing the information about
    design parameters.
    
    Each file has the name n.txt
    '''

    #--------------------------------------------------------------------
    # Specification of the design - factor list, relative paths, etc
    #--------------------------------------------------------------------
    open_design = Button()
    def _open_design_fired(self):
        file_name = open_file( filter = ['*.ASC'], 
                               extensions = [FileInfo(), TextInfo()] )        
        if file_name != '':
            self.design_file = file_name
            #self._curve_ironing()
            self._reset_data()
    
    # File with description of the attributes
    exdesign_spec_file = File
    def _exdesign_spec_file_changed( self ):
        print 'changed file'
        f = file( self.exdesign_spec_file )
        str = f.read()
        self.exdesign_spec = eval( 'ExDesignSpec( %s )' % str ) 

    exdesign_spec = Instance( ExDesignSpec )
    def _exdesign_spec_default(self):
        print 'ExDesignSpec()', ExDesignSpec()
        return ExDesignSpec()

    @on_trait_change('exdesign_spec')
    def _reset_design_file(self):
        dir = os.path.dirname( self. exdesign_spec_file )
        exdesign_file = self.exdesign_spec.design_file
        self.design_file =  os.path.join( dir, exdesign_file )

    exdesign_table_columns = Property( List, depends_on = 'exdesign_spec+' )
    @cached_property
    def _get_exdesign_table_columns(self):
        return [ ObjectColumn( name = ps[2],
                               editable = False,
                               width = 0.15 ) for ps in self.exdesign_spec.factors ]

    #--------------------------------------------------------------------
    # file containing the association between the factor combinations 
    # and data files having the data 
    #--------------------------------------------------------------------
    design_file = File
    
    def _design_file_changed( self ):
        print 'reading design'
        self.exdesign = self._read_exdesign()

    exdesign = Array( float )
    def _exdesign_default(self):
        return self._read_exdesign()

    exdesign_ironed = Array( float )
#    exdesign_ironed = copy(exdesign)
    jump_atol = Float
#    max_jump = Float
    
    def _read_exdesign(self):
        ''' Read the experiment design. 
        '''
        if exists( self.design_file ):
            
            exdesign = loadtxt( self.design_file,  
                        delimiter = ';',
                         )
            return exdesign
        else:
            return []
    
    
    @on_trait_change('jump_rtol, jump_atol')
    def _curve_ironing(self):
        '''removes the jumps in the curve due to 
        resetting of the displacement gauges '''
        
        print '*** curve ironing activated ***'
        
        # slice the column from the data array 
        # each column corresponds to a measured parameter 
        # e.g. displacement at a given point as function of time u = f(t))
        # NOTE: the first column must contain monotonic increasing time
        # this column is not ironed
        for idx in range(self.exdesign.shape[1]-1):
            
            # use copy in order to save initial state of the input data
            data_arr = copy(self.exdesign[:,idx+1])
    
            # get the difference between each point and its successor
            jump_arr =  data_arr[1:] - data_arr[0:-1]
            
            # get the value of the maximum relative jump
            jump_arr_max = max( fabs( jump_arr ))
            
            # get the maximum value of the measured data 
            data_arr_max = max( data_arr )
            data_arr_min = min( data_arr )

            data_arr_range = data_arr_max - data_arr_min
    
            # set the relative and absolute tolerances for the 
            # jump-criteria
            jump_rtol = self.jump_rtol 
            
            # determine the relevant criteria for a jump
            # based on the relative and absolute bound:
            jump_crit = max( self.jump_atol, jump_rtol * jump_arr_max, 
                             jump_rtol * data_arr_range ) 
#            jump_crit = self.jump_tol #, jump_rtol * jump_arr_max, jump_atol * data_arr_range ) 

            # for view define this as global variable
            # variable to display jump_crit in the view
#            self.max_jump = jump_arr_max
#            self.jump_crit = jump_crit
            
            # get the indexes in 'data_column' after which a 
            # jump exceeds the defined tolerance criteria
            jump_indexes = where( fabs(jump_arr) > jump_crit )
            #print 'jump_indexes ', jump_indexes
            
            print '\n idx = ', idx
            print 'number of jumps', jump_indexes[0].shape[0]
            print 'jump_arr_max', jump_arr_max
            print 'data_arr_range', data_arr_range

#            print 'data_arr', data_arr
#            print 'jump_arr', jump_arr

            # glue the curve at each jump together
            for n in range(jump_indexes[0].shape[0]):
                # get the offsets at each jumb of the curve
                jidx = jump_indexes[0][n]
                shift = data_arr[jidx+1] - data_arr[jidx]
#                print 'shift of value: ', shift, ' at jump-number: ', n
                # shift all succeeding values by the calculated offset
                data_arr[jidx+1:] -= shift
#                print 'data_arr', data_arr
#            print 'data_arr shifted', data_arr
            self.exdesign_ironed[:,idx+1] = data_arr[:]
            
        
#    selected_exrun = Instance( ExRun )
#    def _selected_exrun_default(self):
#        if len( self.exdesign ) > 0:
#            return self.exdesign[0]
#        else:
#            return None
#
#    last_exrun = Instance( ExRun )
#    
#    data_sets = List( ExRun )
    
    #------------------------------------------------------------------
    # Array plotting
    #-------------------------------------------------------------------
    # List of arrays to be plotted
#    data = Instance(AbstractPlotData)
#    def _data_default(self):
#        return ArrayPlotData( x = array([]), y = array([]) )

    plot = Instance(Plot)
    def _plot_default(self):
        p = Plot()
        p.tools.append(PanTool(p))
        p.overlays.append(ZoomTool(p))
        return p
    
    xidx = Int( 0, auto_set = False, enter_set = True )
    yidx = Int( 1, auto_set = False, enter_set = True )
    
    jump_rtol = Float(0.03, auto_set = False, enter_set = True )
    #jump_crit = Float( auto_set = False, enter_set = True )
    
    
#    @on_trait_change('selected_exruns')
#    def _rest_last_exrun(self):
#        if len( self.selected_exruns ) > 0:
#            self.last_exrun = self.selected_exruns[-1]
#    
    @on_trait_change('xidx, yidx')
    def _reset_data(self):
        '''
        '''
        print '***RESET DATA***'
            
        for name in self.plot.plots.keys():
            self.plot.delplot( name )
        
        if self.exdesign_ironed.shape[0] == 0:
            self.exdesign_ironed = copy(self.exdesign)
        
        for idx in range( self.exdesign.shape[1] ):
            self.plot.datasources[ `idx` ] = ArrayDataSource( self.exdesign_ironed[:,idx],
                                                              sort_order = 'none' )

        self.plot.plot( (`self.xidx`,`self.yidx`), color = 'black' )
        
        colors = ['red','blue','brown','yellow','black','orange','black','black','black','black','black']
#        for idx in range( 2, self.exdesign.shape[1] ):
#        for idx in [9]:
#            print 'adding plot', idx, '1'
#            self.plot.plot( (`idx`,`1`), color = colors[idx] )

    view_traits = View( HSplit( VGroup( Item('open_design',  show_label = False,
                                             style = 'simple' ),
                                        Item('xidx'),
                                        Item('yidx'),
#                                        Item('max_jump',style = 'readonly' ),
                                        Item('jump_rtol'),
                                        Item('jump_atol'),
#                                        Item( 'jump_crit',style = 'readonly' ),
#                                             editor = array_editor, 
#                                             show_label = False, style = 'custom' )
                                        ),
#                                VGroup( Item('last_exrun@', 
#                                             show_label = False ),
                                        Item('plot', 
                                             editor=ComponentEditor(), 
                                             show_label = False,
                                             resizable = True
                                                                                          ),
#                                          ),
                                ),
#                        handler = EXDesignReaderHandler(),
                        resizable = True,
                        buttons = [ OKButton, CancelButton ],
                        height = 0.8,
                        width = 0.8 )
    
    

doe_reader = EXDesignReader()
doe_reader.configure_traits( view = 'view_traits' )

